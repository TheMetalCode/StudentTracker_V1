/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TrackerUI.java
 *
 * Created on Jan 29, 2011, 7:09:21 PM
 */

package GUT1.Task4.StudentTracker;

import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author XPMUser
 */
public class TrackerUI extends javax.swing.JFrame {

    /** Creates new form TrackerUI */
    public TrackerUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbDisplayPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dbTA = new javax.swing.JTextArea();
        dbLbl = new javax.swing.JLabel();
        appTitleLbl = new javax.swing.JLabel();
        studCommonPanel = new javax.swing.JPanel();
        studCommonLbl = new javax.swing.JLabel();
        firstNameLbl = new javax.swing.JLabel();
        lastNameLbl = new javax.swing.JLabel();
        studIDLbl = new javax.swing.JLabel();
        gpaLbl = new javax.swing.JLabel();
        statusLbl = new javax.swing.JLabel();
        mentorLbl = new javax.swing.JLabel();
        studIDTxt = new javax.swing.JTextField();
        firstNameTxt = new javax.swing.JTextField();
        lastNameTxt = new javax.swing.JTextField();
        gpaTxt = new javax.swing.JTextField();
        mentorTxt = new javax.swing.JTextField();
        studentTypeCB = new javax.swing.JComboBox();
        studentTypeLbl = new javax.swing.JLabel();
        statusCB = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        UGPanelLbl = new javax.swing.JLabel();
        levelLbl = new javax.swing.JLabel();
        levelCB = new javax.swing.JComboBox();
        gradPanel = new javax.swing.JPanel();
        gradLbl = new javax.swing.JLabel();
        thesisTitleLbl = new javax.swing.JLabel();
        thesisTitleTxt = new javax.swing.JTextField();
        thesisAdvisorTxt = new javax.swing.JTextField();
        thesisAdvisorLbl = new javax.swing.JLabel();
        partTimePanel = new javax.swing.JPanel();
        partTimeLabel = new javax.swing.JLabel();
        companyLbl = new javax.swing.JLabel();
        companyTxt = new javax.swing.JTextField();
        tuitionPanel = new javax.swing.JPanel();
        tuitionLbl = new javax.swing.JLabel();
        creditsLbl = new javax.swing.JLabel();
        creditsTxt = new javax.swing.JTextField();
        amtDueTxt = new javax.swing.JTextField();
        amtDueLbl = new javax.swing.JLabel();
        calcTuitionBtn = new javax.swing.JButton();
        mentorPanel = new javax.swing.JPanel();
        mentorPanelLbl = new javax.swing.JLabel();
        mentorFNLbl = new javax.swing.JLabel();
        mentorFNTxt = new javax.swing.JTextField();
        mentorLNLbl = new javax.swing.JLabel();
        mentorLNTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        addStudentsTA = new javax.swing.JTextArea();
        addStudIDsLbl = new javax.swing.JLabel();
        addMentorBtn = new javax.swing.JButton();
        getStudentListBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        studentListTA = new javax.swing.JTextArea();
        addStudentBtn = new javax.swing.JButton();
        updateStudentBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        queryAllBtn = new javax.swing.JButton();
        queryBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Student Tracker v1.0");

        dbDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dbTA.setColumns(20);
        dbTA.setEditable(false);
        dbTA.setRows(5);
        jScrollPane1.setViewportView(dbTA);

        dbLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        dbLbl.setText("Student Database Display");

        javax.swing.GroupLayout dbDisplayPanelLayout = new javax.swing.GroupLayout(dbDisplayPanel);
        dbDisplayPanel.setLayout(dbDisplayPanelLayout);
        dbDisplayPanelLayout.setHorizontalGroup(
            dbDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1094, Short.MAX_VALUE)
                    .addComponent(dbLbl))
                .addContainerGap())
        );
        dbDisplayPanelLayout.setVerticalGroup(
            dbDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dbLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        appTitleLbl.setFont(new java.awt.Font("Trebuchet MS", 3, 24));
        appTitleLbl.setText("The Student Tracker v1.0");

        studCommonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        studCommonLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        studCommonLbl.setText("Common Student Attributes");

        firstNameLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        firstNameLbl.setText("First Name:");

        lastNameLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        lastNameLbl.setText("Last Name:");

        studIDLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        studIDLbl.setText("Student ID:");

        gpaLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        gpaLbl.setText("GPA:");

        statusLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        statusLbl.setText("Residency Status:");

        mentorLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        mentorLbl.setText("Mentor:");

        studentTypeCB.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        studentTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Undergraduate", "Graduate", "Part-Time" }));

        studentTypeLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        studentTypeLbl.setText("Student Type:");

        statusCB.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        statusCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Resident", "Nonresident" }));

        javax.swing.GroupLayout studCommonPanelLayout = new javax.swing.GroupLayout(studCommonPanel);
        studCommonPanel.setLayout(studCommonPanelLayout);
        studCommonPanelLayout.setHorizontalGroup(
            studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studCommonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studCommonPanelLayout.createSequentialGroup()
                        .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusLbl)
                            .addComponent(gpaLbl)
                            .addComponent(lastNameLbl)
                            .addComponent(firstNameLbl)
                            .addComponent(studIDLbl)
                            .addComponent(mentorLbl)
                            .addComponent(studentTypeLbl))
                        .addGap(21, 21, 21)
                        .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusCB, javax.swing.GroupLayout.Alignment.TRAILING, 0, 224, Short.MAX_VALUE)
                            .addComponent(lastNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(gpaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(mentorTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(studentTypeCB, 0, 224, Short.MAX_VALUE)
                            .addComponent(firstNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)))
                    .addComponent(studCommonLbl))
                .addContainerGap())
        );
        studCommonPanelLayout.setVerticalGroup(
            studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studCommonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studCommonLbl)
                .addGap(14, 14, 14)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studIDLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gpaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gpaLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusLbl)
                    .addComponent(statusCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mentorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mentorLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studCommonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentTypeLbl))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        UGPanelLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        UGPanelLbl.setText("Undergraduate Attributes");

        levelLbl.setText("UG Level:");

        levelCB.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        levelCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Freshman", "Sophomore", "Junior", "Senior" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UGPanelLbl)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(levelLbl)
                        .addGap(62, 62, 62)
                        .addComponent(levelCB, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UGPanelLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelLbl)
                    .addComponent(levelCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gradPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        gradLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        gradLbl.setText("Graduate Attributes");

        thesisTitleLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        thesisTitleLbl.setText("Thesis Title:");

        thesisAdvisorLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        thesisAdvisorLbl.setText("Thesis Advisor:");

        javax.swing.GroupLayout gradPanelLayout = new javax.swing.GroupLayout(gradPanel);
        gradPanel.setLayout(gradPanelLayout);
        gradPanelLayout.setHorizontalGroup(
            gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gradLbl)
                    .addGroup(gradPanelLayout.createSequentialGroup()
                        .addGroup(gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(thesisTitleLbl)
                            .addComponent(thesisAdvisorLbl))
                        .addGap(35, 35, 35)
                        .addGroup(gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(thesisAdvisorTxt)
                            .addComponent(thesisTitleTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gradPanelLayout.setVerticalGroup(
            gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gradLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thesisTitleLbl)
                    .addComponent(thesisTitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gradPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thesisAdvisorLbl)
                    .addComponent(thesisAdvisorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        partTimePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        partTimeLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        partTimeLabel.setText("Part-Time Attributes");

        companyLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        companyLbl.setText("Company:");

        javax.swing.GroupLayout partTimePanelLayout = new javax.swing.GroupLayout(partTimePanel);
        partTimePanel.setLayout(partTimePanelLayout);
        partTimePanelLayout.setHorizontalGroup(
            partTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(partTimeLabel)
                    .addGroup(partTimePanelLayout.createSequentialGroup()
                        .addComponent(companyLbl)
                        .addGap(64, 64, 64)
                        .addComponent(companyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        partTimePanelLayout.setVerticalGroup(
            partTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(partTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(partTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(companyLbl)
                    .addComponent(companyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tuitionPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tuitionLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        tuitionLbl.setText("Tuition Due");

        creditsLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        creditsLbl.setText("Credits:");

        amtDueTxt.setEditable(false);

        amtDueLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        amtDueLbl.setText("Amount Due:");

        calcTuitionBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        calcTuitionBtn.setText("Calculate Tuition");
        calcTuitionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcTuitionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tuitionPanelLayout = new javax.swing.GroupLayout(tuitionPanel);
        tuitionPanel.setLayout(tuitionPanelLayout);
        tuitionPanelLayout.setHorizontalGroup(
            tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tuitionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tuitionLbl)
                    .addGroup(tuitionPanelLayout.createSequentialGroup()
                        .addGroup(tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creditsLbl)
                            .addComponent(amtDueLbl))
                        .addGap(59, 59, 59)
                        .addGroup(tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(amtDueTxt)
                            .addComponent(creditsTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calcTuitionBtn)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        tuitionPanelLayout.setVerticalGroup(
            tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tuitionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tuitionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creditsLbl)
                    .addComponent(creditsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcTuitionBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tuitionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amtDueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amtDueLbl))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        mentorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mentorPanelLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        mentorPanelLbl.setText("Mentor Attributes");

        mentorFNLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        mentorFNLbl.setText("First Name:");

        mentorLNLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        mentorLNLbl.setText("Last Name:");

        addStudentsTA.setColumns(20);
        addStudentsTA.setRows(5);
        jScrollPane2.setViewportView(addStudentsTA);

        addStudIDsLbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11));
        addStudIDsLbl.setText("Add Students by ID:");

        addMentorBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        addMentorBtn.setText("Add Mentor w/Students");
        addMentorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMentorBtnActionPerformed(evt);
            }
        });

        getStudentListBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        getStudentListBtn.setText("List Students for Mentor");
        getStudentListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStudentListBtnActionPerformed(evt);
            }
        });

        studentListTA.setColumns(20);
        studentListTA.setEditable(false);
        studentListTA.setRows(5);
        jScrollPane3.setViewportView(studentListTA);

        javax.swing.GroupLayout mentorPanelLayout = new javax.swing.GroupLayout(mentorPanel);
        mentorPanel.setLayout(mentorPanelLayout);
        mentorPanelLayout.setHorizontalGroup(
            mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mentorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mentorPanelLayout.createSequentialGroup()
                        .addComponent(mentorPanelLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addStudIDsLbl))
                    .addGroup(mentorPanelLayout.createSequentialGroup()
                        .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(getStudentListBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mentorPanelLayout.createSequentialGroup()
                                .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mentorFNLbl)
                                    .addComponent(mentorLNLbl))
                                .addGap(22, 22, 22)
                                .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mentorLNTxt)
                                    .addComponent(mentorFNTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                            .addComponent(addMentorBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mentorPanelLayout.setVerticalGroup(
            mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mentorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mentorPanelLbl)
                    .addComponent(addStudIDsLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mentorPanelLayout.createSequentialGroup()
                        .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mentorFNTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mentorFNLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mentorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mentorLNTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mentorLNLbl))
                        .addGap(18, 18, 18)
                        .addComponent(addMentorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(getStudentListBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addStudentBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        addStudentBtn.setText("Add Student");
        addStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentBtnActionPerformed(evt);
            }
        });

        updateStudentBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        updateStudentBtn.setText("Update Student");
        updateStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStudentBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        deleteBtn.setText("Delete Student");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        queryAllBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        queryAllBtn.setText("Show All Records");
        queryAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryAllBtnActionPerformed(evt);
            }
        });

        queryBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 11));
        queryBtn.setText("Query Records");
        queryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(appTitleLbl)
                        .addGap(436, 436, 436))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(dbDisplayPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(studCommonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(partTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(gradPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addStudentBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(updateStudentBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(deleteBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(queryBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(queryAllBtn)
                                    .addGap(12, 12, 12)))
                            .addGap(6, 6, 6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tuitionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mentorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appTitleLbl)
                .addGap(18, 18, 18)
                .addComponent(dbDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gradPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(partTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(studCommonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(queryAllBtn)
                            .addComponent(queryBtn)
                            .addComponent(deleteBtn)
                            .addComponent(updateStudentBtn)
                            .addComponent(addStudentBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tuitionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mentorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryAllBtnActionPerformed
        
        dbTA.setText("");
        dbTA.append(Student.queryAll());


    }//GEN-LAST:event_queryAllBtnActionPerformed

    private void addStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentBtnActionPerformed
        
        try {
            //Collecting contents of relevant data input fields from the GUI
            String theFN = firstNameTxt.getText();
            String theLN = lastNameTxt.getText();
            int theStudID = 0;
            float theGPA = 0;
            String theStatus = statusCB.getSelectedItem().toString();
            String theMentor = mentorTxt.getText();
            String theStudType = studentTypeCB.getSelectedItem().toString();
            String theLevel = levelCB.getSelectedItem().toString();
            String theThesisTitle = thesisTitleTxt.getText();
            String theThesisAdvisor = thesisAdvisorTxt.getText();
            String theCompany = companyTxt.getText();

            //If any required field is left empty, an exception is thrown.
            if (!Student.containsText(theFN) || !Student.containsText(theLN)
                || !Student.containsText(theStatus)
                || !Student.containsText(theMentor)
                || !Student.containsText(theStudType)
                || !Student.containsText(studIDTxt.getText())
                || !Student.containsText(gpaTxt.getText())) {
                throw new Exception();
            }

            /**
             * The strings in the studentID and GPA fields are parsed as int/float
             * if and only if they contain valid numerical values.
             */

            if (Student.numbersOnly(studIDTxt.getText()) &
                    Student.containsGPA(gpaTxt.getText())) {
                theStudID = Integer.parseInt(studIDTxt.getText());
                theGPA = Float.parseFloat(gpaTxt.getText());
            }

            else {
                throw new NumberFormatException();
            }

            //Adds an Undergraduate student
            if (theStudType.equals("Undergraduate")) {
                Student newUG = new Undergraduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theLevel);
                JOptionPane.showMessageDialog(this, newUG.add());
                dbTA.setText(newUG.query());

            }

            //Adds a Graduate student
            if (theStudType.equals("Graduate")) {
                Student newGR = new Graduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theThesisTitle,
                        theThesisAdvisor);
                JOptionPane.showMessageDialog(this, newGR.add());
                dbTA.setText(newGR.query());

            }

            //Adds a PartTime student
            if (theStudType.equals("Part-Time")) {
                Student newPT = new PartTime(theFN, theLN, theStudID, theGPA,
                        theStatus, theMentor, theStudType, theCompany);
                JOptionPane.showMessageDialog(this, newPT.add());
                dbTA.setText(newPT.query());

            }
        }

        /**
         * If Integer.parseInt() or Float.parseFloat() fail, or in other words,
         * if the user enters non-numbers into the GPA or studentID fields,
         * a NumberFormatException will be thrown.  This catch block alerts the
         * user to correct their entries and try again.
         */
        
        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "You've entered text in fields"
                    + " that accept only numbers.\n  Please correct your entries"
                    + " and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);
            
        }
         
        /**
         * This catch block handles the exception thrown if any required field
         * is left blank in the GUI.
         */
        
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid entry"
                    + " for each data field under common student attributes!\n"
                    + " Please enter all required data and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addStudentBtnActionPerformed

    private void updateStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStudentBtnActionPerformed

        try {
             //Collecting contents of relevant data input fields from the GUI
            String theFN = firstNameTxt.getText();
            String theLN = lastNameTxt.getText();
            int theStudID = 0;
            float theGPA = 0;
            String theStatus = statusCB.getSelectedItem().toString();
            String theMentor = mentorTxt.getText();
            String theStudType = studentTypeCB.getSelectedItem().toString();
            String theLevel = levelCB.getSelectedItem().toString();
            String theThesisTitle = thesisTitleTxt.getText();
            String theThesisAdvisor = thesisAdvisorTxt.getText();
            String theCompany = companyTxt.getText();

            //If any required field is left empty, an exception is thrown.
            if (!Student.containsText(theFN) || !Student.containsText(theLN)
                || !Student.containsText(theStatus)
                || !Student.containsText(theMentor)
                || !Student.containsText(theStudType)
                || !Student.containsText(studIDTxt.getText())
                || !Student.containsText(gpaTxt.getText())) {
                throw new Exception();
            }

            /**
             * The strings in the studentID and GPA fields are parsed as int/float
             * if and only if they contain valid numerical values.
             */

            if (Student.numbersOnly(studIDTxt.getText()) &
                    Student.containsGPA(gpaTxt.getText())) {
                theStudID = Integer.parseInt(studIDTxt.getText());
                theGPA = Float.parseFloat(gpaTxt.getText());
            }

            else {
                throw new NumberFormatException();
            }

            //Updates an Undergraduate student
            if (theStudType.equals("Undergraduate")) {
                Student newUG = new Undergraduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theLevel);
                JOptionPane.showMessageDialog(this, newUG.update());
                dbTA.setText(newUG.query());

            }

            //Updates a Graduate student
            if (theStudType.equals("Graduate")) {
                Student newGR = new Graduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theThesisTitle,
                        theThesisAdvisor);
                JOptionPane.showMessageDialog(this, newGR.update());
                dbTA.setText(newGR.query());

            }

            //Updates a PartTime student
            if (theStudType.equals("Part-Time")) {
                Student newPT = new PartTime(theFN, theLN, theStudID, theGPA,
                        theStatus, theMentor, theStudType, theCompany);
                JOptionPane.showMessageDialog(this, newPT.update());
                dbTA.setText(newPT.query());

            }
        }

        /**
         * If Integer.parseInt() or Float.parseFloat() fail, or in other words,
         * if the user enters non-numbers into the GPA or studentID fields,
         * a NumberFormatException will be thrown.  This catch block alerts the
         * user to correct their entries and try again.
         */

        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "You've entered text in fields"
                    + " that accept only numbers.\n  Please correct your entries"
                    + " and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }

        /**
         * This catch block handles the exception thrown if any required field
         * is left blank in the GUI.
         */

        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid entry"
                    + " for each data field under common student attributes!\n"
                    + " Please enter all required data and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateStudentBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        
        dbTA.setText("");
        try {
            //Collecting contents of relevant data input fields from the GUI
            int theStudID = 0;
            
            //If no studentID is provided, an exception is thrown.
            if (!Student.containsText(studIDTxt.getText())) {
                throw new Exception();
            }

            //A studentID int is parsed if and only if it contains a valid number
            if (Student.numbersOnly(studIDTxt.getText())) {
                theStudID = Integer.parseInt(studIDTxt.getText());
            }

            else {
                throw new NumberFormatException();
            }

            //Deletes the specified student record
            Student newUG = new Undergraduate();
            newUG.setStudID(theStudID);
            JOptionPane.showMessageDialog(this, newUG.delete());
            dbTA.append(Student.queryAll());
            
        }

        /**
         * If Integer.parseInt() or Float.parseFloat() fail, or in other words,
         * if the user enters non-numbers into the GPA or studentID fields,
         * a NumberFormatException will be thrown.  This catch block alerts the
         * user to correct their entries and try again.
         */

        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "You've entered text in fields"
                    + " that accept only numbers.\n  Please correct your entries"
                    + " and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }

        /**
         * This catch block handles the exception thrown if any required field
         * is left blank in the GUI.
         */

        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid entry"
                    + " for Student ID!\n"
                    + " Please enter all required data and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void queryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryBtnActionPerformed

        dbTA.setText("");
        try {
            //Collecting contents of relevant data input fields from the GUI
            String theFN = firstNameTxt.getText();
            String theLN = lastNameTxt.getText();
            int theStudID = 0;
            float theGPA = 0;
            String theStatus = statusCB.getSelectedItem().toString();
            String theMentor = mentorTxt.getText();
            String theStudType = studentTypeCB.getSelectedItem().toString();
            String theLevel = levelCB.getSelectedItem().toString();
            String theThesisTitle = thesisTitleTxt.getText();
            String theThesisAdvisor = thesisAdvisorTxt.getText();
            String theCompany = companyTxt.getText();

            /**
             * A studentID will only be included in the query if and only if
             * the field contains a valid integer.
             */
            if (Student.numbersOnly(studIDTxt.getText())) {
                theStudID = Integer.parseInt(studIDTxt.getText());
            }

            /**
             * A gpa will only be included in the query if and only if
             * the field contains a valid float value.
             */
            if (Student.containsGPA(gpaTxt.getText())) {
                theGPA = Float.parseFloat(gpaTxt.getText());
            }

            /**
             * Queries an Undergraduate student if enough query data exits
             * to construct an Undergraduate object.
             */
            if (theStudType.equals("Undergraduate") | Student.containsText(theLevel)) {
                Student newUG = new Undergraduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theLevel);
                dbTA.append(newUG.query());

            }

            /**
             * Queries a Graduate student if enough query data exists to
             * construct a Graduate object.
             */
            else if(theStudType.equals("Graduate") | Student.containsText(theThesisTitle)
                     | Student.containsText(theThesisAdvisor)) {
                Student newGR = new Graduate(theFN, theLN, theStudID,
                        theGPA, theStatus, theMentor, theStudType, theThesisTitle,
                        theThesisAdvisor);
                dbTA.append(newGR.query());

            }

            /**
             * Queries a PartTime student if enough query data exists to
             * construct a PartTime object.
             */
            else if(theStudType.equals("Part-Time") | Student.containsText(theCompany)) {
                Student newPT = new PartTime(theFN, theLN, theStudID, theGPA,
                        theStatus, theMentor, theStudType, theCompany);
                dbTA.append(newPT.query());

            }
            
            //Queries any student in the DB if studentType or type-specific
            //fields are not filled out.
            else {
                Student stud = new Undergraduate(theFN, theLN, theStudID, 
                        theGPA, theStatus, theMentor, theStudType, theLevel);
                stud.setStudentType(" ");
                dbTA.append(stud.query());
            }


        }

        /**
         * This catch block handles the exception thrown if any required field
         * is left blank in the GUI.
         */

        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid entry"
                    + " for Student Type!  Please try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_queryBtnActionPerformed

    private void calcTuitionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcTuitionBtnActionPerformed
        
        dbTA.setText("");
        try {
            //Collecting contents of relevant data input fields from the GUI
            String theFN = firstNameTxt.getText();
            String theLN = lastNameTxt.getText();
            int theStudID = 0;
            float theGPA = 0;
            String theStatus = statusCB.getSelectedItem().toString();
            String theMentor = mentorTxt.getText();
            String theStudType = studentTypeCB.getSelectedItem().toString();
            String theLevel = levelCB.getSelectedItem().toString();
            String theThesisTitle = thesisTitleTxt.getText();
            String theThesisAdvisor = thesisAdvisorTxt.getText();
            String theCompany = companyTxt.getText();
            int theCredHrs = 0;

            /**
             * An exception is thrown if either studentID or credits are left
             * blank, or if studentID equals 0.
             */
            if (!Student.containsText(studIDTxt.getText()) ||
                    !Student.containsText(creditsTxt.getText()) ||
                    studIDTxt.getText().equals("0")) {
                throw new Exception();
            }

            //If the two required fields contain valid info, they are parsed.
            if (Student.numbersOnly(studIDTxt.getText()) &
                    Student.numbersOnly(creditsTxt.getText())) {
                theStudID = Integer.parseInt(studIDTxt.getText());
                theCredHrs = Integer.parseInt(creditsTxt.getText());
            }

            else {
                throw new NumberFormatException();
            }

            /**
             * Constructing the initial Student object with which to perform
             * the query, and appending the student record to the display area.
             */
            Student billable = new Undergraduate(theFN, theLN, theStudID, theGPA,
                    theStatus, theMentor, theStudType, theLevel);
            billable.setStudID(theStudID);
            String studInfo = billable.query();
            dbTA.append(studInfo);

            //An exception is thrown if no such student record exists.
            if (studInfo.isEmpty()) {
                throw new SQLException();
            }

            //This code block runs if the student is an Undergraduate.
            if (studInfo.contains("Undergraduate")) {
                billable.setStudentType("Undergraduate");

                //If the student is a Resident, the object attribute is set.
                if (studInfo.contains("Resident")) {
                    billable.setStatus("Resident");
                }

                //If the student is a Nonresident, the object attribute is set.
                if (studInfo.contains("Nonresident")) {
                    billable.setStatus("Nonresident");
                }

                //Using polymorphism, the tuition is calculated and displayed.
                int amtDue = billable.calculateTuition(theCredHrs);
                amtDueTxt.setText(Integer.toString(amtDue));
            }

            //This code block runs if the student is a Graduate.
            if (studInfo.contains("Graduate")) {
                billable = new Graduate(theFN, theLN, theStudID, theGPA, theStatus,
                        theMentor, theStudType, theThesisTitle, theThesisAdvisor);
                billable.setStudentType("Graduate");

                //If the student is a Resident, the object attribute is set.
                if (studInfo.contains("Resident")) {
                    billable.setStatus("Resident");
                }

                //If the student is a Nonresident, the object attribute is set.
                if (studInfo.contains("Nonresident")) {
                    billable.setStatus("Nonresident");
                }

                //Using polymorphism, the tuition is calculated and displayed.
                int amtDue = billable.calculateTuition(theCredHrs);
                amtDueTxt.setText(Integer.toString(amtDue));
            }

            //This code block runs if the student is a PartTime.
            if (studInfo.contains("Part-Time")) {
                billable = new PartTime(theFN, theLN, theStudID, theGPA, theLevel,
                        theMentor, theStudType, theCompany);
                billable.setStudentType("Part-Time");

                //If the student is a Resident, the object attribute is set.
                if (studInfo.contains("Resident")) {
                    billable.setStatus("Resident");
                }

                //If the student is a Nonresident, the object attribute is set.
                if (studInfo.contains("Nonresident")) {
                    billable.setStatus("Nonresident");
                }

                //Using polymorphism, the tuition is calculated and displayed.
                int amtDue = billable.calculateTuition(theCredHrs);
                amtDueTxt.setText(Integer.toString(amtDue));
            }

        }

        /**
         * This message is displayed to the user if there is no such student
         * record.
         */
        catch (SQLException sql) {
            JOptionPane.showMessageDialog(this, "There is no such student"
                    + " record with this Student ID!\n  Please enter an existing"
                    + " Student ID and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }

        /**
         * If Integer.parseInt() or Float.parseFloat() fail, or in other words,
         * if the user enters non-numbers into the GPA or studentID fields,
         * a NumberFormatException will be thrown.  This catch block alerts the
         * user to correct their entries and try again.
         */

        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "You've entered text in fields"
                    + " that accept only numbers.\n  Please correct your entries"
                    + " and try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }

        /**
         * This message is displayed to the user if they have entered invalid
         * info (or no info) for studentID and/or credits.
         */
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid"
                    + " Student ID number and\n a valid number of credit hours!"
                    + "Please try again!", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_calcTuitionBtnActionPerformed

    private void addMentorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMentorBtnActionPerformed
        
        studentListTA.setText("");

        try {
            //Collecting mentor attributes
            String mentorFN = mentorFNTxt.getText();
            String mentorLN = mentorLNTxt.getText();
            String addStudIDs = addStudentsTA.getText();

            
            /**
             * If the mentor name fields or the student ID list is left blank,
             * an exception is thrown.
             */
            if (!Student.containsText(mentorFN)
                    || !Student.containsText(mentorLN)
                    || !Student.containsText(addStudIDs)) {
                throw new Exception();
            }
            
            //This creates a string array of individual studentIDs.
            String[] studIDStrings = addStudIDs.split("\\n");

            /**
             * This creates an array of studentID ints that can be passed as
             * an argument to the addStudent() method.
             */
            int[] studentIDs = new int[studIDStrings.length];
            for (int i = 0; i < studIDStrings.length; i++) {
                int nextID = Integer.parseInt(studIDStrings[i]);
                studentIDs[i] = nextID;
            }

            /**
             * Constructs the mentor object and performs the addStudent method
             * that associates the mentor with each specified student.
             */
            Mentor newMentor = new Mentor(mentorFN, mentorLN);
            JOptionPane.showMessageDialog(this, newMentor.addStudent(studentIDs));


        }

        /**
         * The only reason an exception is likely to occur, other than
         * the exception explicitly thrown when required fields are left blank,
         * is if the operation to assign the mentor to the students in the list
         * fails due to non-numerical data or there not being a corresponding
         * student record.  Hence, this catch block serves all likely error
         * conditions for this event handler.
         */
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid"
                    + " first and last name, and at least one valid Student ID\n"
                    + " that corresponds to an existing student record!"
                    + " Please ensure that all data is valid, \nand that multiple"
                    + " studentIDs are separated by a new line, and try again!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addMentorBtnActionPerformed

    private void getStudentListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStudentListBtnActionPerformed
        // TODO add your handling code here:
        studentListTA.setText("");

        try {
            //Collecting mentor attributes
            String mentorFN = mentorFNTxt.getText();
            String mentorLN = mentorLNTxt.getText();

            /**
             * If the mentor name fields are left blank,
             * an exception is thrown.
             */
            if (!Student.containsText(mentorFN)
                    || !Student.containsText(mentorLN)) {
                throw new Exception();
            }

            /**
             * Constructs the mentor object and performs the addStudent method
             * that associates the mentor with each specified student.
             */
            Mentor newMentor = new Mentor(mentorFN, mentorLN);
            studentListTA.append(newMentor.listStudents());


        }

        /**
         * Alerts the user if the Mentor name fields have been left blank.
         */
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You must enter a valid"
                    + " first and last name!\n Please try again!",
                    "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_getStudentListBtnActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TrackerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UGPanelLbl;
    private javax.swing.JButton addMentorBtn;
    private javax.swing.JLabel addStudIDsLbl;
    private javax.swing.JButton addStudentBtn;
    private javax.swing.JTextArea addStudentsTA;
    private javax.swing.JLabel amtDueLbl;
    private javax.swing.JTextField amtDueTxt;
    private javax.swing.JLabel appTitleLbl;
    private javax.swing.JButton calcTuitionBtn;
    private javax.swing.JLabel companyLbl;
    private javax.swing.JTextField companyTxt;
    private javax.swing.JLabel creditsLbl;
    private javax.swing.JTextField creditsTxt;
    private javax.swing.JPanel dbDisplayPanel;
    private javax.swing.JLabel dbLbl;
    private javax.swing.JTextArea dbTA;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel firstNameLbl;
    private javax.swing.JTextField firstNameTxt;
    private javax.swing.JButton getStudentListBtn;
    private javax.swing.JLabel gpaLbl;
    private javax.swing.JTextField gpaTxt;
    private javax.swing.JLabel gradLbl;
    private javax.swing.JPanel gradPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastNameLbl;
    private javax.swing.JTextField lastNameTxt;
    private javax.swing.JComboBox levelCB;
    private javax.swing.JLabel levelLbl;
    private javax.swing.JLabel mentorFNLbl;
    private javax.swing.JTextField mentorFNTxt;
    private javax.swing.JLabel mentorLNLbl;
    private javax.swing.JTextField mentorLNTxt;
    private javax.swing.JLabel mentorLbl;
    private javax.swing.JPanel mentorPanel;
    private javax.swing.JLabel mentorPanelLbl;
    private javax.swing.JTextField mentorTxt;
    private javax.swing.JLabel partTimeLabel;
    private javax.swing.JPanel partTimePanel;
    private javax.swing.JButton queryAllBtn;
    private javax.swing.JButton queryBtn;
    private javax.swing.JComboBox statusCB;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JLabel studCommonLbl;
    private javax.swing.JPanel studCommonPanel;
    private javax.swing.JLabel studIDLbl;
    private javax.swing.JTextField studIDTxt;
    private javax.swing.JTextArea studentListTA;
    private javax.swing.JComboBox studentTypeCB;
    private javax.swing.JLabel studentTypeLbl;
    private javax.swing.JLabel thesisAdvisorLbl;
    private javax.swing.JTextField thesisAdvisorTxt;
    private javax.swing.JLabel thesisTitleLbl;
    private javax.swing.JTextField thesisTitleTxt;
    private javax.swing.JLabel tuitionLbl;
    private javax.swing.JPanel tuitionPanel;
    private javax.swing.JButton updateStudentBtn;
    // End of variables declaration//GEN-END:variables

}
